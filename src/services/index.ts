/**
 * Point d'entr√©e principal pour tous les services - VERSION RESTRUCTUR√âE
 * Organisation hi√©rarchique: API -> Business -> Utils
 */

// ===== NOUVEAUX SERVICES STRUCTUR√âS =====

// Services API (communication avec le backend)
export * from './api';

// Services Business (logique m√©tier)
export * from './business/auth-business.service';

// Services utilitaires
export * from './utils/data-utils.service';

// ===== SERVICES LEGACY (compatibilit√©) =====
// √Ä migrer progressivement vers la nouvelle architecture

export { MedecinService } from './medecinService';
export type { MedecinDto } from './medecinService';
export { ResultatService } from './resultatService';
export type { PatientResult } from './resultatService';
export { ReportService } from './reportService';

// Export des autres services existants
export * from './authService';
export * from './patientService';
export * from './rendezVousService';
export * from './depistageService';
export * from './messageService';
export * from './notificationService';
export * from './telemedicineService';
export * from './httpService';

// ===== CONFIGURATION ET INITIALISATION =====

/**
 * Initialisation compl√®te des services
 */
export const initializeServices = () => {
  console.log('üöÄ Initialisation des services FadakCare...');
  
  // Initialiser les nouveaux services API
  try {
    // Les services utilisent automatiquement la config d'environnement
    console.log('‚úÖ Services API initialis√©s');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation des services:', error);
  }
  
  console.log('üéâ Services FadakCare pr√™ts');
};

/**
 * Helper pour la gestion centralis√©e des erreurs
 */
export const handleServiceError = (error: unknown, context = 'Service'): string => {
  console.error(`[${context}] Erreur:`, error);
  
  if (error && typeof error === 'object' && 'message' in error) {
    return (error as { message: string }).message;
  }
  
  return 'Une erreur est survenue. Veuillez r√©essayer.';
};
